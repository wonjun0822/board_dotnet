name: AWS EC2

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: 1.0.${{ github.run_number }}
  NAME: board_dotnet

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: jsdaniell/create-json@v1.2.1
        with:
          name: "appsettings.json"
          json: ${{ secrets.APPLICATION }}
          dir: ./

      - uses: microsoft/variable-substitution@v1
        with:
          files: 'appsettings.json'
        env:
          Jwt.Issuer: ${{ secrets.JWT_ISSUER }}
          Jwt.Audience: ${{ secrets.JWT_AUDIENCE }}
          Jwt.SecretKey: ${{ secrets.JWT_SECRET_KEY }}
          ConnectionStrings.Redis: ${{ secrets.CONNECTION_REDIS }}
          ConnectionStrings.MySQL: ${{ secrets.CONNECTION_MYSQL }}

      - uses: actions/upload-artifact@v2
        with:
          name: application.json
          path: ./appsettings.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}
          
      - name: Docker run
        run: |
          docker run -d -p 8000:8080 --name ${{ env.NAME }} --restart always ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker run -d -p 7000:7080 --name ${{ env.NAME }} --restart always ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
